// import { createAsyncThunk } from '@reduxjs/toolkit';
// import { userRequest } from '../../network/RequestMethod';
// import { addProduct } from '../cartRedux';

// export const addProductAsync = createAsyncThunk(
//   'cart/addProductAsync',
//   async (cartData, { rejectWithValue, dispatch }) => {
//     const { userId } = cartData;
//     try {
//       if (userId) {
//         const response = await userRequest.post('/cart', cartData);
//         return response.data;
//       } else {
//         const existingItem = localStorage.getItem('cartData');
//         let updatedCartData = cartData;

//         if (existingItem) {
//           const existingCartData = JSON.parse(existingItem);
//           updatedCartData = {
//             ...existingCartData,
//             products: [...existingCartData.products],
//           };

//           if (cartData.products && Array.isArray(cartData.products)) {
//             // Check if products exists and is an array
//             cartData.products.forEach((product) => {
//               const existingProductIndex = updatedCartData.products.findIndex(
//                 (p) => p._id.toString() === product._id.toString()
//               );

//               if (existingProductIndex !== -1) {
//                 updatedCartData.products[existingProductIndex].quantity +=
//                   product.quantity;
//               } else {
//                 updatedCartData.products.push({
//                   _id: product._id,
//                   quantity: product.quantity,
//                   price: product.price,
//                 });
//               }
//             });
//           }

//           updatedCartData.total = updatedCartData.products.reduce(
//             (acc, product) => {
//               return acc + product.price * product.quantity;
//             },
//             0
//           );

//           const uniqueProductIds = Array.from(
//             new Set(updatedCartData.products.map((product) => product._id))
//           );
//           updatedCartData.items = uniqueProductIds.length;
//         }

//         localStorage.setItem('cartData', JSON.stringify(updatedCartData));
//         dispatch(addProduct(updatedCartData));
//         return updatedCartData;
//       }
//     } catch (error) {
//       console.log(error);
//       return rejectWithValue(error.response.data);
//     }
//   }
// );

// export const addProductAsync = createAsyncThunk(
//   'cart/addProductAsync',
//   async (cartData, { rejectWithValue, dispatch }) => {
//     const { userId } = cartData;
//     try {
//       if (userId) {
//         const response = await userRequest.post('/cart', cartData);
//         return response.data;
//       } else {
//         const existingItem = localStorage.getItem('cartData');
//         let updatedCartData = cartData;

//         if (existingItem) {
//           const existingCartData = JSON.parse(existingItem);
//           updatedCartData = {
//             ...existingCartData,
//             products: [...existingCartData.products],
//           };

//           cartData.products.forEach((product) => {
//             const existingProductIndex = updatedCartData.products.findIndex(
//               (p) => p._id.toString() === product._id.toString()
//             );

//             if (existingProductIndex !== -1) {
//               updatedCartData.products[existingProductIndex].quantity +=
//                 product.quantity;
//             } else {
//               updatedCartData.products.push({
//                 _id: product._id,
//                 quantity: product.quantity,
//                 price: product.price,
//               });
//             }
//           });

//           updatedCartData.total = updatedCartData.products.reduce(
//             (acc, product) => {
//               return acc + product.price * product.quantity;
//             },
//             0
//           );

//           const uniqueProductIds = Array.from(
//             new Set(updatedCartData.products.map((product) => product._id))
//           );
//           updatedCartData.items = uniqueProductIds.length;
//         }

//         localStorage.setItem('cartData', JSON.stringify(updatedCartData));
//         dispatch(addProduct(updatedCartData));
//         return updatedCartData;
//       }
//     } catch (error) {
//       console.log(error);
//       return rejectWithValue(error.response.data);
//     }
//   }
// );


// addProduct: (state, action) => {
//   const newProducts = action.payload.products;
//   state.products = newProducts;
//   state.quantity = newProducts.reduce(
//     (acc, product) => acc + product.quantity,
//     0
//   );
//   state.total = newProducts.reduce(
//     (acc, product) => acc + product.price * product.quantity,
//     0
//   );

//   const uniqueProductIds = new Set(
//     newProducts.map((product) => product._id)
//   );
//   state.items = uniqueProductIds.size;
// },

make a cart in redux toolkit.
the cartData will be 
  const cartData = {
    products: [
      {
        _id: product._id,
        quantity: 1,
        price: product.price,
      },
    ],
    userId: userId,
    items: cart.items + 1,
  };
items will be how many products are in there. i mean if there is 2 apple and 1 banana the items will be 2.

now use redux toolkit for making this cart. but make sure to do these points. 

1. create a mongodb model based on that cartData. userId cannot be null/undefined 
2. create a route in nodejs which will receive the cartData from body. extract products and userId. if userId is null then dont proceed. if not null then find the userId in the mongodb database. i mean find cart by userId. now there are two condition.  a) if the product doesnt exist in cart then the products.quantity will be the quantity you get from the body. b) if the product exist then add the new products.quantity to the new products.quantity. [if products.quantity is 2 and and add 3 more products.quantity the final answer will be 5.]
3. also create a route for fectching the cartData by userId
4. now create  a store for redux and a slice for cart and also a thunk for cart.
5. the slice which will be named cartRedux.js. should have the initials as cartData. the initial state will be the data that i get from fectching [if there is userId] or localStorage.getItem('cartData') [if there is no userId or undefined or null]. the initial state will be a merge of fectching and localStorage. for example if i have 3 apple in mongodb and 2 apple in localStorage the initial state will be 5 apple.

now create a store.js, cartRedux.js, cartThunk.js, CartModel.js, CartRoute.js

// import { createAsyncThunk } from '@reduxjs/toolkit';
// import { userRequest } from '../../network/RequestMethod';
// import { addOrUpdateProduct } from '../cartRedux';

// export const addProductAsync = createAsyncThunk(
//   'cart/addProductAsync',
//   async (cartData, { rejectWithValue, dispatch }) => {
//     const { userId } = cartData;
//     console.log(cartData);
//     try {
//       if (userId) {
//         const response = await userRequest.post('/cart', cartData);
//         console.log(response);
//         return response.data;
//       } else {
//         const existingItem = localStorage.getItem('cartData');
//         let updatedCartData = cartData;

//         if (existingItem) {
//           const existingCartData = JSON.parse(existingItem);
//           updatedCartData = {
//             ...existingCartData,
//             products: [...existingCartData.products],
//           };

//           if (cartData.products && Array.isArray(cartData.products)) {
//             cartData.products.forEach((product) => {
//               const existingProductIndex = updatedCartData.products.findIndex(
//                 (p) => p._id.toString() === product._id.toString()
//               );

//               if (existingProductIndex !== -1) {
//                 updatedCartData.products[existingProductIndex].quantity +=
//                   product.quantity;
//               } else {
//                 updatedCartData.products.push({
//                   _id: product._id,
//                   quantity: product.quantity,
//                   price: product.price,
//                 });
//               }
//             });
//           }

//           updatedCartData.total = updatedCartData.products.reduce(
//             (acc, product) => {
//               return acc + product.price * product.quantity;
//             },
//             0
//           );

//           const uniqueProductIds = Array.from(
//             new Set(updatedCartData.products.map((product) => product._id))
//           );
//           updatedCartData.items = uniqueProductIds.length;
//         }

//         localStorage.setItem('cartData', JSON.stringify(updatedCartData));

//         dispatch(addOrUpdateProduct({ products: updatedCartData.products }));

//         return updatedCartData;
//       }
//     } catch (error) {
//       console.log(error);
//       return rejectWithValue(error.response?.data || error.message);
//     }
//   }
// );


// export const ArrowLeft = () => {
//   return (
//     <>
//       <svg
//         width='50px'
//         height='50px'
//         viewBox='0 0 64 64'
//         xmlns='http://www.w3.org/2000/svg'
//         stroke-width='0.64'
//         stroke='#000000'
//         fill='none'
//         transform='matrix(-1, 0, 0, 1, 0, 0)'
//       >
//         <g id='SVGRepo_bgCarrier' stroke-width='0'></g>
//         <g id='SVGRepo_iconCarrier'>
//           <polyline points='18.86 57.47 44.12 30.84 18.86 6.58'></polyline>
//         </g>
//       </svg>
//     </>
//   );
// };

// export const ArrowRight = () => {
//   return (
//     <>
//       <svg
//         width='50px'
//         height='50px'
//         viewBox='0 0 64 64'
//         xmlns='http://www.w3.org/2000/svg'
//         stroke-width='0.64'
//         stroke='#000000'
//         fill='none'
//         transform='matrix(1, 0, 0, 1, 0, 0)'
//       >
//         <g id='SVGRepo_bgCarrier' stroke-width='0'></g>
//         <g id='SVGRepo_iconCarrier'>
//           <polyline points='18.86 57.47 44.12 30.84 18.86 6.58'></polyline>
//         </g>
//       </svg>
//     </>
//   );
// };

// export const ShoppingCart = () => {
//   return (
//     <>
//       <svg
//         className='h-5 w-5'
//         viewBox='0 0 24 24'
//         fill='none'
//         xmlns='http://www.w3.org/2000/svg'
//       >
//         <path
//           d='M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.70711 15.2929C4.07714 15.9229 4.52331 17 5.41421 17H17M17 17C15.8954 17 15 17.8954 15 19C15 20.1046 15.8954 21 17 21C18.1046 21 19 20.1046 19 19C19 17.8954 18.1046 17 17 17ZM9 19C9 20.1046 8.10457 21 7 21C5.89543 21 5 20.1046 5 19C5 17.8954 5.89543 17 7 17C8.10457 17 9 17.8954 9 19Z'
//           stroke='currentColor'
//           stroke-width='2'
//           stroke-linecap='round'
//           stroke-linejoin='round'
//         />
//       </svg>
//     </>
//   );
// };

// export const Search = () => {
//   return (
//     <>
//       <svg
//         width='30px'
//         height='30px'
//         viewBox='0 0 24 24'
//         fill='none'
//         xmlns='http://www.w3.org/2000/svg'
//       >
//         <g id='SVGRepo_bgCarrier' stroke-width='0'></g>
//         <g
//           id='SVGRepo_tracerCarrier'
//           stroke-linecap='round'
//           stroke-linejoin='round'
//         ></g>
//         <g id='SVGRepo_iconCarrier'>
//           {' '}
//           <path
//             d='M14.5776 14.5419C15.5805 13.53 16.2 12.1373 16.2 10.6C16.2 7.50721 13.6928 5 10.6 5C7.50721 5 5 7.50721 5 10.6C5 13.6928 7.50721 16.2 10.6 16.2C12.1555 16.2 13.5628 15.5658 14.5776 14.5419ZM14.5776 14.5419L19 19'
//             stroke='#464455'
//             stroke-linecap='round'
//             stroke-linejoin='round'
//           ></path>{' '}
//         </g>
//       </svg>
//     </>
//   );
// };

// export const Remove = () => {
//   return (
//     <>
//       <svg
//         width='30px'
//         height='30px'
//         viewBox='-204.8 -204.8 1433.60 1433.60'
//         class='icon'
//         xmlns='http://www.w3.org/2000/svg'
//         fill='#000000'
//         stroke='#000000'
//         stroke-width='0.01024'
//       >
//         <g id='SVGRepo_bgCarrier' stroke-width='0'></g>
//         <g
//           id='SVGRepo_tracerCarrier'
//           stroke-linecap='round'
//           stroke-linejoin='round'
//           stroke='#CCCCCC'
//           stroke-width='24.576'
//         ></g>
//         <g id='SVGRepo_iconCarrier'>
//           <path
//             fill='#000000'
//             d='M352 480h320a32 32 0 110 64H352a32 32 0 010-64z'
//           ></path>
//           <path
//             fill='#000000'
//             d='M512 896a384 384 0 100-768 384 384 0 000 768zm0 64a448 448 0 110-896 448 448 0 010 896z'
//           ></path>
//         </g>
//       </svg>
//     </>
//   );
// };

// export const Add = () => {
//   return (
//     <>
//       <svg
//         width='30px'
//         height='30px'
//         viewBox='-7.2 -7.2 38.40 38.40'
//         fill='none'
//         xmlns='http://www.w3.org/2000/svg'
//       >
//         <g id='SVGRepo_bgCarrier' stroke-width='0'></g>
//         <g
//           id='SVGRepo_tracerCarrier'
//           stroke-linecap='round'
//           stroke-linejoin='round'
//         ></g>
//         <g id='SVGRepo_iconCarrier'>
//           {' '}
//           <circle
//             cx='12'
//             cy='12'
//             r='10'
//             stroke='#000000'
//             stroke-width='2'
//           ></circle>{' '}
//           <path
//             fill-rule='evenodd'
//             clipRule='evenodd'
//             d='M13.0001 7C13.0001 6.44771 12.5524 6 12.0001 6C11.4479 6 11.0001 6.44771 11.0001 7V11H7C6.44771 11 6 11.4477 6 12C6 12.5523 6.44772 13 7 13H11.0001V17C11.0001 17.5523 11.4479 18 12.0001 18C12.5524 18 13.0001 17.5523 13.0001 17V13H17C17.5523 13 18 12.5523 18 12C18 11.4477 17.5523 11 17 11H13.0001V7Z'
//             fill='#000000'
//           ></path>{' '}
//         </g>
//       </svg>
//     </>
//   );
// };

// export const ShoppingCartSingle = () => {
//   return (
//     <>
//       <svg
//         className='h-7 w-10 hover:text-green-600'
//         viewBox='0 0 24 24'
//         fill='none'
//         xmlns='http://www.w3.org/2000/svg'
//       >
//         <path
//           d='M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.70711 15.2929C4.07714 15.9229 4.52331 17 5.41421 17H17M17 17C15.8954 17 15 17.8954 15 19C15 20.1046 15.8954 21 17 21C18.1046 21 19 20.1046 19 19C19 17.8954 18.1046 17 17 17ZM9 19C9 20.1046 8.10457 21 7 21C5.89543 21 5 20.1046 5 19C5 17.8954 5.89543 17 7 17C8.10457 17 9 17.8954 9 19Z'
//           stroke='currentColor'
//           stroke-width='2'
//           stroke-linecap='round'
//           stroke-linejoin='round'
//         />
//       </svg>
//     </>
//   );
// };

// export const Logout = () => {
//   return (
//     <>
//       <svg
//         viewBox='-4.8 -4.8 33.60 33.60'
//         fill='none'
//         xmlns='http://www.w3.org/2000/svg'
//       >
//         <g id='SVGRepo_bgCarrier' stroke-width='0'></g>
//         <g
//           id='SVGRepo_tracerCarrier'
//           stroke-linecap='round'
//           stroke-linejoin='round'
//         ></g>
//         <g id='SVGRepo_iconCarrier'>
//           <path
//             d='M21 12L13 12'
//             stroke='#638557'
//             stroke-width='0.9600000000000002'
//             stroke-linecap='round'
//             stroke-linejoin='round'
//           ></path>
//           <path
//             d='M18 15L20.913 12.087V12.087C20.961 12.039 20.961 11.961 20.913 11.913V11.913L18 9'
//             stroke='#638557'
//             stroke-width='0.9600000000000002'
//             stroke-linecap='round'
//             stroke-linejoin='round'
//           ></path>
//           <path
//             d='M16 5V4.5V4.5C16 3.67157 15.3284 3 14.5 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21H14.5C15.3284 21 16 20.3284 16 19.5V19.5V19'
//             stroke='#638557'
//             stroke-width='0.9600000000000002'
//             stroke-linecap='round'
//             stroke-linejoin='round'
//           ></path>
//         </g>
//       </svg>
//     </>
//   );
// };

// import React, { useContext, useEffect } from 'react';
// import { Link, useNavigate } from 'react-router-dom';
// import Swal from 'sweetalert2';
// import logo from '../../assets/logoT.png';
// import NavbarContext from '../../context/NavbarContext';
// import UserContext from '../../context/UserContext';
// import { ShoppingCart } from '../../assets/icons';
// import { useSelector } from 'react-redux';
// import { motion } from 'framer-motion';
// import Notice from './Notice';
// import useAuth from '../../hooks/useAuth';

// const Navbar = () => {
//   const items = useSelector((state) => state.cart.items);

//   const { isOpen, setIsOpen } = useContext(NavbarContext);
//   const { Name, isAdmin, setName, setIsAdmin } = useContext(UserContext);

//   const { userId } = useAuth();

//   const navigate = useNavigate();

//   const handleClick = () => {
//     setIsOpen(!isOpen);
//   };

//   const handleLogout = () => {
//     Swal.fire({
//       title: 'Are you sure?',
//       text: 'You will be logged out of your session.',
//       icon: 'warning',
//       showCancelButton: true,
//       confirmButtonColor: '#3085d6',
//       cancelButtonColor: '#d33',
//       confirmButtonText: 'Yes, logout!',
//     }).then((result) => {
//       if (result.isConfirmed) {
//         localStorage.removeItem('accessToken');
//         localStorage.removeItem('id');
//         setName('');
//         setIsAdmin(false);
//         navigate('/');
//         Swal.fire(
//           'Logged out!',
//           'You have been successfully logged out.',
//           'success'
//         );
//       }
//     });
//   };

//   return (
//     <>
//       {/* <Notice /> */}
//       <motion.nav
//         className='w-full bg-green-200 flex justify-between items-center'
//         initial={{ y: -1, opacity: 0.1 }}
//         animate={{ y: 0, opacity: 1 }}
//       >
//         <div className='flex-1'>
//           <div className='w-auto md:w-[35%]'>
//             <Link to='/'>
//               <img className='relative h-14 w-auto p-2' src={logo} alt='Logo' />
//             </Link>
//           </div>
//         </div>

//         <div className='px-4 cursor-pointer md:hidden' onClick={handleClick}>
//           <svg
//             xmlns='http://www.w3.org/2000/svg'
//             className='h-6 w-6'
//             fill='none'
//             viewBox='0 0 24 24'
//             stroke='#066e06'
//           >
//             <path
//               strokeLinecap='round'
//               strokeLinejoin='round'
//               strokeWidth={2}
//               d='M4 6h16M4 12h16m-7 6h7'
//             />
//           </svg>
//         </div>

//         <div className='flex-1 text-center md:block hidden'>
//           <ul className='flex justify-center items-center'>
//             <li className='justify-center items-center flex'>
//               <Link
//                 className='items-center text-base text-green-800 font-medium hover:text-green-600 md:mx-4 md:my-0 group'
//                 to='/'
//               >
//                 Home
//                 <span className='block max-w-0 group-hover:max-w-full transition-all duration-200 h-0.5 bg-green-500'></span>
//               </Link>
//             </li>
//             <li className='justify-center items-center flex'>
//               <Link
//                 className='items-center text-base text-green-800 font-medium hover:text-green-600 md:mx-4 md:my-0 group'
//                 to='/shop/all'
//               >
//                 Shop
//                 <span className='block max-w-0 group-hover:max-w-full transition-all duration-200 h-0.5 bg-green-500'></span>
//               </Link>
//             </li>
//             <li className='justify-center items-center flex'>
//               <Link
//                 className='items-center text-base text-green-800 font-medium hover:text-green-600 md:mx-4 md:my-0 group'
//                 to='/contact'
//               >
//                 Contact
//                 <span className='block max-w-0 group-hover:max-w-full transition-all duration-200 h-0.5 bg-green-500'></span>
//               </Link>
//             </li>

//             <li className='justify-center items-center flex'>
//               <Link
//                 className='items-center text-base text-green-800 font-medium hover:text-green-600 md:mx-4 md:my-0 group'
//                 to='/about'
//               >
//                 About Us
//                 <span className='block max-w-0 group-hover:max-w-full transition-all duration-200 h-0.5 bg-green-500'></span>
//               </Link>
//             </li>
//           </ul>
//         </div>

//         <div className='flex-1 text-end md:block hidden'>
//           <ul className='flex justify-end items-center'>
//             {Name != '' && isAdmin && (
//               <>
//                 <li>
//                   <Link
//                     className='my-1 text-base text-green-800 font-medium m-0 py-2 px-3 md:mx-2 rounded-md hover:text-green-600'
//                     to={`/cart`}
//                   >
//                     <div className='flex'>
//                       <div className='mt-1'>
//                         <ShoppingCart />
//                       </div>
//                       <div>({items})</div>
//                     </div>
//                   </Link>
//                 </li>
//                 <li>
//                   <Link
//                     className='my-1 text-base text-green-800 hover:text-green-600 font-medium m-0 py-2 px-3 md:mx-2 rounded-md'
//                     to='/admin/dashboard'
//                   >
//                     Dashboard
//                   </Link>
//                 </li>
//                 <li>
//                   <button
//                     className='my-1 text-base text-green-50 font-medium m-0 bg-red-500 hover:bg-red-600 py-2 px-3 md:mx-2 rounded-md'
//                     onClick={handleLogout}
//                   >
//                     Logout
//                   </button>
//                 </li>
//               </>
//             )}
//             {Name != '' && isAdmin == false && (
//               <>
//                 <li>
//                   <Link
//                     className='my-1 text-base text-green-800 font-medium m-0 py-2 px-3 md:mx-2 rounded-md hover:text-green-600'
//                     to={`/cart`}
//                   >
//                     <div className='flex'>
//                       <div className='mt-1'>
//                         <ShoppingCart />
//                       </div>
//                       <div>({items})</div>
//                     </div>
//                   </Link>
//                 </li>
//                 <li>
//                   <Link
//                     className='my-1 text-base text-green-800 font-medium m-0 py-2 px-3 md:mx-2 rounded-md hover:text-green-600'
//                     to={`/user-details/${userId}`}
//                   >
//                     Profile
//                   </Link>
//                 </li>
//                 <li>
//                   <button
//                     className='my-1 text-base text-green-50 font-medium m-0 bg-red-500 hover:bg-red-600 py-2 px-3 md:mx-2 rounded-md'
//                     onClick={handleLogout}
//                   >
//                     Logout
//                   </button>
//                 </li>
//               </>
//             )}
//             {Name === '' && (
//               <>
//                 <li>
//                   <Link
//                     className='my-1 text-base text-green-800 font-medium m-0 py-2 px-3 md:mx-2 rounded-md hover:text-green-600'
//                     to={`/cart`}
//                   >
//                     <div className='flex'>
//                       <div className='mt-1'>
//                         <ShoppingCart />
//                       </div>
//                       <div>({items})</div>
//                     </div>
//                   </Link>
//                 </li>
//                 <li>
//                   <Link
//                     className='my-1 text-base text-green-50 font-medium m-0 bg-blue-600 hover:bg-blue-900 py-2 px-3 md:mx-2 rounded-md'
//                     to='/login'
//                   >
//                     Login
//                   </Link>
//                 </li>
//                 <li>
//                   <Link
//                     className='my-1 text-base text-green-50 font-medium m-0 bg-purple-700 hover:bg-purple-500 py-2 px-3 md:mx-2 rounded-md'
//                     to='/registration'
//                   >
//                     Signup
//                   </Link>
//                 </li>
//               </>
//             )}
//           </ul>
//         </div>
//       </motion.nav>
//     </>
//   );
// };

// export default Navbar;

// setIsLoading(true);
// dispatch(addProduct({ ...product, quantity }));

// setTimeout(() => {

//   });
// }, 500);

// <div className='flex flex-col shadow-lg bg-green-50 rounded-lg max-w-[13rem] border-black/5 border-2'>
//   <Link to={`/product/${product._id}`}>
//     <img
//       className='object-cover rounded-t-lg h-[10rem] md:h-[12rem] w-full justify-center items-center'
//       src={product.img}
//       alt='product image'
//     />
//   </Link>
//   <div className='px-3'>
//     <h5 className='text-lg md:text-xl font-normal text-green-900 mt-1'>
//       {product.title}
//     </h5>
//     <p className='text-sm text-green-900 mt-0 mb-0 md:mt-2 md:mb-1'>
//       {product.size}
//     </p>
//     <div className='flex flex-row justify-between md:items-center mb-1'>
//       <h5 className='text-base md:text-2xl font-thin text-green-900'>
//         ৳ {product.price}
//       </h5>
//       <div className='mt-1'>
//         <button
//           className='text-green-400 hover:text-green-600 mr-5 transition-all'
//           onClick={handleWishList}
//         >
//           <FaHeart />
//         </button>
//       </div>
//     </div>
//     <button
//       className='w-full p-2 bg-green-300 hover:bg-green-600 text-green-900 hover:text-white transition-all rounded-lg mb-3 font-thin'
//       onClick={handleCart}
//       disabled={isLoading}
//     >
//       {isLoading ? 'Adding to cart...' : 'Add to Cart'}
//     </button>
//   </div>
// </div>
// <Card className='w-full max-w-60 rounded-xl border width bg-primaryBlue'>
//   <div className='grid gap-4 p-4'>
//     <div className='aspect-[3/4] w-full overflow-hidden rounded-xl'>
//       <Link to={`/product/${product._id}`}>
//         <img
//           src={product.img}
//           alt='Product image'
//           className='aspect-[4/5] object-cover border w-full'
//         />
//       </Link>
//     </div>
//     <div className='grid gap-1.5'>
//       <h3 className='font-semibold text-sm md:text-base text-black/80'>
//         {product.title}
//       </h3>
//       <p className='font-semibold text-sm md:text-base text-black/80'>
//         ৳ {product.price}
//       </p>

//       <div className='mt-1 flex justify-between'>
//         <p className='text-sm md:text-base text-black/80'>{product.size}</p>
//         <button
//           className='text-primaryGreen hover:text-primaryRed mr-5 transition-all'
//           onClick={handleWishList}
//         >
//           <FaHeart />
//         </button>
//       </div>
//     </div>
//     <Button
//       size='sm'
//       className='hover:bg-primaryRed bg-primaryGreen'
//       onClick={handleCart}
//       disabled={isLoading}
//     >
//       {isLoading ? 'Adding to cart...' : 'Add to Cart'}
//     </Button>
//   </div>
// </Card>






















